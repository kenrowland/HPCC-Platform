/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2015 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

ESPrequest GetPathRequest 
{
    string path;
};


ESPstruct instanceType
{
    string displayName;
    string type;
};


ESPstruct limitsType
{
    int    min(0);
    int    max(0);
    ESParray<string, allow> allowList;
    ESParray<string, disallow> disallowList;
    ESParray<string, expr> regex;
    ESParray<ESPstruct instanceType, instance> allowedInstances;
};


ESPstruct typeInfo
{
    string name("na");
    ESPstruct limitsType limits;
    ESParray<string, modifier> modifiers;
};


ESPstruct elementDataType
{
    int   numAllowedInstances(0);
    int   numRequiredInstances(0);
    ESPstruct typeInfo type;
    string currentValue("");
    string defaultValue("");
    bool   required(true);
    bool   readonl(false);
};


ESPstruct docType
{
    string tooltip("");
    string msg("");
};


ESPstruct elementType
{
    string    name("");
    string    displayName("");
    string    class("");
    string    path("");
    ESPstruct docType doc;
    int       numChildren(0);
    ESPstruct elementDataType elementData;
};


ESPstruct valueType
{
    string    name;
    string    value;
    string    msg("");     // used for warnings and errors and whatever
};


ESPresponse [exceptions_inline, encode(0)] GetPathResponse
{
    string status("error");
    string inputPath;
    ESParray<ESPstruct elementType, element> elements;
};


ESPrequest CreateInstanceRequest  // response is same as GetPathRequest
{
    string path;  // path to instance set where a new one is created
};


ESPrequest SetValueSetRequest
{
    string path;  // path to instance set where a new one is created
    ESParray<ESPstruct valueType, value> values;
};


ESPresponse [exceptions_inline, encode(0)] SetValueSetResponse
{
    string status("error");
    ESParray<ESPstruct valueType, value> values;
};


ESPservice [auth_feature("DEFERRED"),version("2.0"), default_client_version("2.0"), exceptions_inline("xslt/exceptions.xslt")] ws_config2
{
    ESPMethod getPath(GetPathRequest, GetPathResponse);
    
};

SCMexportdef(ws_config2);

SCMapi(ws_config2) IClientws_config2 *createws_config2Client();

