/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2017 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

ESPrequest GetNodeRequest 
{
    string id;
};


ESPstruct instanceType
{
    string displayName;
    string type;
};


ESPstruct choiceType
{
    string name;
    string desc("");
};


ESPstruct limitsType
{
    int    min(0);
    int    max(0);
    ESParray<ESPstruct choiceType, choice> choiceList;
    ESParray<string, disallow> disallowList;
    ESParray<string, expr> regex;
    ESParray<ESPstruct instanceType, instance> allowedInstances;
};


ESPstruct typeInfo
{
    string name("na");
    ESPstruct limitsType limits;
    ESParray<string, modifier> modifiers;
};


ESPstruct docType
{
    string tooltip("");
    string msg("");
};


ESPstruct itemInfoType
{
    string    name("");
    string    displayName("");
    string    status("ok");
};


ESPstruct elementType
{
    ESPstruct itemInfoType itemInfo;
    string    class("");
    string    category("");
    ESParray<string, id> idList;
    ESPstruct docType doc;
    int   numChildren(0);
    int   numAllowedInstances(0);
    int   numRequiredInstances(0);
};


ESPstruct attributeType
{
    ESPstruct  itemInfoType itemInfo;
    ESPstruct docType doc;
    ESPstruct  typeInfo type;
    string currentValue("");
    string defaultValue("");
	bool   valueSet(false);           // indicates if currentValue is actually a valid value (has been set)
    bool   defaultProvided(false);    // true if defaultValue is a valid default value, false if no default provided
    bool   required(true);
    bool   readonly(false);
    bool   forceOut(false);
};


ESPstruct attributeValueType
{
    string    name;
    string    value;
	bool      force(false);  // set to true to allow setting a non-legal value, or to add a new value that is not defined
};


ESPresponse [exceptions_inline, encode(0)] GetNodeResponse
{
    string inputId;
	string status("error");
	ESPstruct docType doc;
    ESParray<ESPstruct attributeType, attribute> attributes;
    ESParray<ESPstruct elementType, child> children;
	bool valueDefined(false);                                    // indicates that value if defined (not normal)
	ESPstruct attributeType value;                               // this would be <element>value</element> not normal, see valueDefined
};


ESPrequest CreateInstanceRequest  // response is same as GetPathRequest
{
    string id;    // node id where new isntance is to be created
    string name;  // name of new instance to create
};


ESPrequest SetValuesRequest
{
    string id;    // 
    ESParray<ESPstruct attributeValueType, attribute> attributeValues;
	bool allowInvalid(false);  // true to allow setting an invalid value
    bool forceCreate(false);   // force creaation of new value if not defined
	string value("");   // only valid if valueDefined is true for this path, ignored otherwise
};


ESPresponse [exceptions_inline, encode(0)] SetValueSetResponse
{
    string status("error");
    ESPstruct docType doc;
    //ESParray<ESPstruct valueType, value> values;
};


ESPservice [auth_feature("DEFERRED"),version("2.0"), default_client_version("2.0"), exceptions_inline("xslt/exceptions.xslt")] ws_config2
{
    ESPMethod getNode(GetNodeRequest, GetNodeResponse);
    ESPMethod setValues(SetValuesRequest, GetNodeResponse);
};


SCMexportdef(ws_config2);

SCMapi(ws_config2) IClientws_config2 *createws_config2Client();

