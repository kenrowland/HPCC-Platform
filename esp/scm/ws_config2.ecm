/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2017 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

//
// Session

ESPrequest OpenSessionRequest
{
    string username;
};

ESPresponse OpenSessionResponse
{
    string sessionId;
    bool error(false);
};

ESPrequest CloseSessionRequest
{
    string sessionId;
};



//
// Node management

ESPrequest GetNodeRequest 
{
    string sessionId;
    string nodeId;
};


ESPstruct instanceType
{
    string displayName;
    string type;
};


ESPstruct choiceType
{
    string name;
    string desc("");
};


ESPstruct limitsType
{
    int    min(0);
    int    max(0);
    ESParray<ESPstruct choiceType, choice> choiceList;
    ESParray<string, disallow> disallowList;
    ESParray<string, expr> regex;
    ESParray<ESPstruct instanceType, instance> allowedInstances;
};


ESPstruct typeInfo
{
    string name("na");
    ESPstruct limitsType limits;
    ESParray<string, modifier> modifiers;
};


ESPstruct statusMsgType
{
    string msgLevel;                // message level ("info", "warning", "error", "fatal")
    string nodeId;                  // node identifier that generated this status message
    string refNodeId("");           // optional refereence node (message dependent)
    string attribute("");           // name of node's attribute generating the message ("" for the node itself)
    string msg;                     // the message
};


ESPstruct statusType
{
    bool error(false);    // true if a message exsits in status (below) with a message level of error or higher
    ESParray<ESPstruct statusMsgType, statusMsg> status;
};


ESPstruct docType
{
    string tooltip("");
    string msg("");
};



ESPstruct elementType
{
    string    name("");
    string    elementType("");
    string    class("");
    string    category("");
    //ESParray<string, id> nodeIdList;
    string    nodeId;
    ESPstruct docType doc;
    int   numChildren(0);
    int   numAllowedInstances(0);
    int   numRequiredInstances(0);
};


ESPstruct newElementType
{
    string    name("");
    string    elementType("");
    string    class("");
    string    category("");
    bool      isRequired(false);
    ESPstruct docType doc;
};


ESPstruct attributeType
{
    string    name("");
    ESPstruct docType doc;
    ESPstruct  typeInfo type;
    string currentValue("");
    string defaultValue("");
	bool   valueSet(false);           // indicates if currentValue is actually a valid value (has been set)
    bool   defaultValid(false);       // true if defaultValue is a valid default value, false if no default provided
    bool   required(true);
    bool   readonly(false);
};


ESPstruct attributeValueType
{
    string    name;
    string    value;
	bool      force(false);  // set to true to allow setting a non-legal value, or to add a new value that is not defined
};


ESPresponse [exceptions_inline, encode(0)] GetNodeResponse
{
    string nodeId;
    string nodeName;
	ESPstruct statusType status;
    ESParray<ESPstruct attributeType, attribute> attributes;
    ESParray<ESPstruct elementType, child> children;
    ESParray<ESPstruct newElementType, item> newElements;
    bool nodeValueDefined(false);                                // true if the node is configured to have a value (not usually true)
	bool nodeValueSet(false);                                    // if configured, true if the node value has been set
	ESPstruct attributeType value;                               // this would be <element>value</element> not normal, see valueDefined
};


ESPrequest CreateInstanceRequest  // response is same as GetPathRequest
{
    string nodeId;    // node id where new isntance is to be created
    string name;  // name of new instance to create
};


ESPrequest SetValuesRequest
{
    string nodeId;    // 
    ESParray<ESPstruct attributeValueType, attribute> attributeValues;
	bool allowInvalid(false);  // true to allow setting an invalid value
    bool forceCreate(false);   // force creaation of new value if not defined
	string value("");   // only valid if valueDefined is true for this path, ignored otherwise
};


ESPresponse [exceptions_inline, encode(0)] SetValuesResponse
{
    string nodeId;
	ESPstruct statusType status;
};


ESPrequest GetParentsRequest
{
    string nodeId;   
};


ESPresponse [exceptions_inline, encode(0)] GetParentsResponse
{
    string nodeId;
	ESPstruct statusType status;
    ESParray<string, parentId> parentIdList;
};


//
// Environment management

ESPstruct environmentFileType
{
    string    filename;
	bool      isActive(false);  // True if this is the current active environment
};

ESPrequest GetEnvironmentListRequest
{
    string sessionId;
};

ESPresponse GetEnvironmentListResponse
{
    ESParray<ESPstruct environmentFileType, environmentFile> environmentFiles;
};

ESPrequest SetEnvironmentConfigRequest
{
    string sessionId;
    string configPath;
    string sourcePath;
    string activePath;
};

ESPresponse PassFailResponse
{
    bool error(false);
};



ESPservice [auth_feature("DEFERRED"),version("2.0"), default_client_version("2.0"), exceptions_inline("xslt/exceptions.xslt")] ws_config2
{
    ESPMethod openSession(OpenSessionRequest, OpenSessionResponse);
    ESPMethod closeSession(CloseSessionRequest, PassFailResponse);
    ESPMethod setEnvironmentConfig(SetEnvironmentConfigRequest, PassFailResponse);
    ESPMethod getEnvironmentFileList(GetEnvironmentListRequest, GetEnvironmentListResponse);
    ESPMethod getNode(GetNodeRequest, GetNodeResponse);
    ESPMethod setValues(SetValuesRequest, SetValuesResponse);
    ESPMethod getParents(GetParentsRequest, GetParentsResponse);
};


SCMexportdef(ws_config2);

SCMapi(ws_config2) IClientws_config2 *createws_config2Client();

