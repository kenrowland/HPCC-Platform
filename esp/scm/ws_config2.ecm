/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2017 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */


ESPstruct statusMsgType
{
    string msgLevel;                // message level ("info", "warning", "error", "fatal")
    string nodeId;                  // node identifier that generated this status message
    string refNodeId("");           // optional refereence node (message dependent)
    string attribute("");           // name of node's attribute generating the message ("" for the node itself)
    string msg;                     // the message
};

ESPstruct statusType
{
    bool error(false);    // true if a message exsits in status (below) with a message level of error or higher
    ESParray<ESPstruct statusMsgType, statusMsg> status;
};


ESPresponse PassFailResponse
{
    bool error(false);
    string msg("");
};


ESPresponse CommonStatusResponse
{
    ESPstruct statusType status;
};


//
// Session management (not to be confused with platform session management)

ESPrequest OpenSessionRequest
{
    string username;
    string type("XML");           // type of session 
    string configPath("");        // location of configuration schema environmentFiles
    string masterConfigFile("");  // name of master config control file
    string sourcePath("");        // path to envrionment files 
    string activePath("");        // path to active environment file ("" for none)
};


ESPresponse OpenSessionResponse 
{
    bool error(false);
    string sessionId;
    string msg("");         // any messages from the open session request
};


ESPrequest CloseSessionRequest
{
    string sessionId;
    bool forceClose(false);    // must be true to close a session that have a modified environmrnt file
};



//
// Node management

ESPrequest NodeRequest 
{
    string sessionId("0");
    string nodeId;
};


ESPstruct instanceType
{
    string displayName;
    string type;
};


ESPstruct choiceType
{
    string name;
    string desc("");
};


ESPstruct limitsType
{
    int    min(0);
    int    max(0);
    ESParray<ESPstruct choiceType, choice> choiceList;
    ESParray<string, disallow> disallowList;
    ESParray<string, expr> regex;
    ESParray<ESPstruct instanceType, instance> allowedInstances;
};


ESPstruct typeInfo
{
    string name("na");
    ESPstruct limitsType limits;
    ESParray<string, modifier> modifiers;
};


ESPstruct docType
{
    string tooltip("");
    string msg("");
};


ESPstruct elementInfoType
{
    string    name("");
    string    elementType("");
    string    class("");
    string    category("");
    bool      isRequired(false);   // only used when in the insertable list
    ESPstruct docType doc;
};


ESPstruct nodeType
{
    ESPstruct elementInfoType elementInfo;
    string    nodeId;
    int       numChildren(0);
};


ESPstruct attributeType
{
    string    displayName;
    string    name;
    ESPstruct docType doc;
    ESPstruct  typeInfo type;
    string currentValue("");
    string defaultValue("");
    bool   required(true);
    bool   readOnly(false);
    bool   hidden(false);
};


ESPstruct attributeValueType
{
    string    name;
    string    value;
	bool      force(false);  // set to true to allow setting a non-legal value, or to add a new value that is not defined
};


ESPresponse [exceptions_inline, encode(0)] GetNodeResponse
{
    string nodeId;
    string nodeName;
	ESPstruct statusType status;
    ESParray<ESPstruct attributeType, attribute> attributes;
    ESParray<ESPstruct nodeType, child> children;
    ESParray<ESPstruct elementInfoType, item> insertable;        // list of insertable elements under this node
    bool nodeValueDefined(false);                                // true if the node is configured to have a value (not usually true)
	bool nodeValueSet(false);                                    // if configured, true if the node value has been set
	ESPstruct attributeType value;                               // this would be <element>value</element> not normal, see valueDefined
};


ESPrequest InsertNodeRequest  // response is same as GetPathRequest
{
    string sessionId("0");
    string parentNodeId;
    string elementType;  // name of new instance to create
};


ESPrequest SetValuesRequest
{
    string nodeId;    // 
    ESParray<ESPstruct attributeValueType, attribute> attributeValues;
	bool allowInvalid(false);  // true to allow setting an invalid value
    bool forceCreate(false);   // force creaation of new value if not defined
	string value("");   // only valid if valueDefined is true for this path, ignored otherwise
};


ESPresponse [exceptions_inline, encode(0)] SetValuesResponse
{
    string nodeId;
	ESPstruct statusType status;
};



ESPresponse [exceptions_inline, encode(0)] GetParentsResponse
{
    string nodeId;
	ESPstruct statusType status;
    ESParray<string, parentId> parentIdList;
};


//
// Environment management

ESPstruct environmentFileType
{
    string    filename;
	bool      isActive(false);  // True if this is the current active environment
};

ESPrequest GetEnvironmentListRequest
{
    string sessionId;
};

ESPresponse GetEnvironmentListResponse
{
    ESParray<ESPstruct environmentFileType, environmentFile> environmentFiles;
};


ESPrequest OpenEnvironmentFileRequest
{
    string sessionId;
    string filename;
};



ESPrequest SaveEnvironmentFileRequest
{
    string sessionId;
    string filename("");     // empty string means to overwrite the existing file
};


ESPrequest EnableChangesRequest
{
    string sessionId;
    bool   enable(false);    // can turn on and off
};


ESPservice [auth_feature("DEFERRED"),version("2.0"), default_client_version("2.0"), exceptions_inline("xslt/exceptions.xslt")] ws_config2
{
    ESPMethod openSession(OpenSessionRequest, OpenSessionResponse);
    ESPMethod closeSession(CloseSessionRequest, PassFailResponse);
    ESPMethod getEnvironmentFileList(GetEnvironmentListRequest, GetEnvironmentListResponse);
    ESPMethod openEnvironmentFile(OpenEnvironmentFileRequest, PassFailResponse);
    ESPMethod saveEnvironmentFile(SaveEnvironmentFileRequest, PassFailResponse);
    ESPMethod enableEnvironmentChanges(EnableChangesRequest, PassFailResponse);
    ESPMethod getNode(NodeRequest, GetNodeResponse);
    ESPMethod setValues(SetValuesRequest, SetValuesResponse);
    ESPMethod getParents(NodeRequest, GetParentsResponse);
    ESPMethod insertNode(InsertNodeRequest, GetNodeResponse);
    ESPMethod removeNode(NodeRequest, CommonStatusResponse);
};


SCMexportdef(ws_config2);

SCMapi(ws_config2) IClientws_config2 *createws_config2Client();

